#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status.

# Environment variables expected from docker-compose
# INFLUXDB_TOKEN, INFLUXDB_ORG, INFLUXDB_BUCKET
# OUTPUT_DIR=/output
# INPUT_DASH_DIR=/dashboards-input

echo "--- Configuration and Dashboard Processing Script Starting ---"

# Use INFLUXDB_SERVICE_URL for internal service communication address
INFLUXDB_SERVICE_URL="http://influxdb:8086"
# Define the fixed Datasource UID (MUST match the one used in generate_grafana_config)
DATASOURCE_UID="influxdb_vmware_ds" # Fixed UID for the Grafana datasource

# --- Generate Telegraf Config ---
generate_telegraf_config() {
    echo "Generating Telegraf output config..."
    mkdir -p "${OUTPUT_DIR}/telegraf"
    cat << EOF > "${OUTPUT_DIR}/telegraf/influxdb_output.conf"
# Configuration generated by setup script
[[outputs.influxdb_v2]]
  urls = ["${INFLUXDB_SERVICE_URL}"]
  token = "${INFLUXDB_TOKEN}"
  organization = "${INFLUXDB_ORG}"
  bucket = "${INFLUXDB_BUCKET}"
  # insecure_skip_verify = true # Optional: Uncomment if needed for self-signed certs
EOF
    echo "Telegraf config written to ${OUTPUT_DIR}/telegraf/influxdb_output.conf"
}

# --- Generate Grafana Datasource Config ---
generate_grafana_config() {
    echo "Generating Grafana datasource config..."
    mkdir -p "${OUTPUT_DIR}/grafana-datasource" # Separate directory for clarity
    cat << EOF > "${OUTPUT_DIR}/grafana-datasource/influxdb_datasource.yml"
# Configuration generated by setup script
apiVersion: 1

datasources:
  - name: InfluxDB-VMware # Name displayed in Grafana
    uid: ${DATASOURCE_UID} # Assign the fixed UID
    type: influxdb
    access: proxy
    url: ${INFLUXDB_SERVICE_URL}
    jsonData:
      version: Flux # Use Flux query language
      organization: ${INFLUXDB_ORG}
      defaultBucket: ${INFLUXDB_BUCKET}
      tlsSkipVerify: true # Adjust if InfluxDB uses TLS with self-signed certs
    secureJsonData:
      token: ${INFLUXDB_TOKEN} # Use the InfluxDB API token
    editable: true # Allow editing in Grafana UI if needed (set to false for strict control)
EOF
    echo "Grafana datasource written to ${OUTPUT_DIR}/grafana-datasource/influxdb_datasource.yml"
}

# --- Process Dashboard JSON Files ---
process_dashboards() {
    local input_dir="${INPUT_DASH_DIR:-/dashboards-input}" # Get input dir from env or default
    local output_dir="${OUTPUT_DIR}/grafana-dashboards" # Output dir for modified dashboards

    # Check if input directory exists and is readable
    if [ ! -d "$input_dir" ] || [ ! -r "$input_dir" ]; then
        echo "Warning: Input dashboard directory '$input_dir' not found or not readable. Skipping dashboard processing."
        return
    fi

    echo "Processing dashboard JSON files from '$input_dir' to '$output_dir'..."
    mkdir -p "$output_dir"

    # Check if jq is installed (it should be via compose command)
    if ! command -v jq &> /dev/null; then
        echo "Error: jq command not found. Cannot process dashboards." >&2
        exit 1
    fi

    # Loop through input JSON files found in the input directory
    find "$input_dir" -maxdepth 1 -name '*.json' -print | while IFS= read -r input_file; do
        local filename
        filename=$(basename "$input_file")
        local output_file="$output_dir/$filename"

        echo "  Processing $filename -> $output_file"

        # Use jq to:
        # 1. Recursively find any object that has a "uid" key with the value "${DS_INFLUXDB}"
        #    and update that "uid" key's value to the fixed $DATASOURCE_UID.
        # 2. Delete the object from the "__inputs" array (if it exists) where the "name" is "DS_INFLUXDB".
        # 3. If the "__inputs" array exists and becomes empty after the deletion, remove the "__inputs" key entirely.
        jq \
            --arg uid "$DATASOURCE_UID" \
            '(.. | select(type == "object" and .uid == "${DS_INFLUXDB}").uid) |= $uid | del(.__inputs[]? | select(.name == "DS_INFLUXDB")) | if .__inputs? | length == 0 then del(.__inputs) else . end' \
            "$input_file" > "$output_file"

        # Check if jq command was successful
        if [ $? -ne 0 ]; then
            echo "Error processing $filename with jq. Please check the JSON validity and jq command." >&2
            # Continue processing other files instead of exiting? Depends on desired behavior.
            # exit 1
        fi
    done

    echo "Dashboard processing complete."
}

# --- Main Execution ---
generate_telegraf_config
generate_grafana_config
process_dashboards # Call the dashboard processing function

echo "--- Configuration and Dashboard Processing Script Finished Successfully ---"
exit 0
